# Two 64 x 32 boards tiled together. Matrix Portal S3 wired to one board,
# the ribbon cable goes from one board to the other.
# Both share the same power.
import board, displayio, time, gc, random, math
from adafruit_matrixportal.matrixportal import MatrixPortal
from adafruit_bitmap_font import bitmap_font
from adafruit_display_text.label import Label
import rtc
import supervisor
import microcontroller

try:
    import microcontroller
    microcontroller.watchdog.timeout = 30
    microcontroller.watchdog.mode = microcontroller.WatchDogMode.RESET
    microcontroller.watchdog.feed()
except AttributeError:
    print("Watchdog not supported on this board.")

displayio.release_displays()

# === Simplified setup for MatrixPortal S3 with TWO 64x32 TILED PANELS (128x32 total) ===
matrixportal = MatrixPortal(width=128, height=32, bit_depth=4)
display = matrixportal.graphics.display

WIDTH = display.width
HEIGHT = display.height

main_group = displayio.Group()
display.root_group = main_group

# === Fonts ===
font_small = bitmap_font.load_font("/fonts/helvB08.bdf")
font_large = bitmap_font.load_font("/fonts/helvB12.bdf")

# === Colors ===
WHITE         = 0xFFFFFF
SOFT_RED      = 0xCC4444
DEEP_CORAL    = 0xFF6F61
PEACH         = 0xFFDAB9
WARM_GOLD     = 0xFFD700
GOLDENROD     = 0xDAA520
TANGERINE     = 0xFFA07A

SKY_BLUE        = 0x87CEEB
AQUA            = 0x00FFFF
TURQUOISE       = 0x40E0D0
SPRING_GREEN    = 0x00FF7F
LIME            = 0xBFFF00
LAVENDER        = 0xE6E6FA
HOT_PINK        = 0xFF69B4
MAGENTA         = 0xFF00FF
DEEP_PURPLE     = 0x800080

# === RAINBOW === #
RED        = 0xFF0000
ORANGE     = 0xFF7F00
YELLOW     = 0xFFFF00
GREEN      = 0x00FF00
CYAN       = 0x00FFFF
BLUE       = 0x0000FF
INDIGO     = 0x4B0082
VIOLET     = 0x9400D3

firework_colors = [WHITE, GOLDENROD, WARM_GOLD, DEEP_CORAL, SOFT_RED, TANGERINE]
celebration_colors = [WHITE, GOLDENROD, WARM_GOLD, DEEP_CORAL, SOFT_RED, TANGERINE, PEACH]

SCROLL_DELAY = 0.025
SCROLL_STEP = 2

messages = [
    ("Hey You! Eagle!", "", "/graphics/bc-logo.bmp", GOLDENROD),
    ("Wanna Learn to Build Cool Stuff?", "", "/graphics/tools.bmp", SOFT_RED),
    ("Maybe Some Interactive Art?", "", "/graphics/art-palette.bmp", DEEP_PURPLE),
    ("How About Building Robots?", "", "/graphics/robot.bmp", LIME),
    ("Are You a Person for Others?", "Wanna Build Tech for Good?", "/graphics/globe.bmp", BLUE),
    ("Take BZAN2175: Physical Computing: Art, Robotics, & Tech for Good", "3 Credit Elective for All Schools, All majors!", "/graphics/bulb.bmp", TANGERINE),
]

def create_scroll_group(logo_path, text1, text2, color=None):
    group = displayio.Group()
    logo_width = 0
    logo_spacing = 33
    logo_tilegrid = None

    if color:
        color1 = color
        color2 = color
    else:
        color1 = random.choice(celebration_colors)
        color2 = random.choice([c for c in celebration_colors if c != color1])

    if logo_path:
        try:
            logo_bitmap = displayio.OnDiskBitmap(logo_path)
            logo_tilegrid = displayio.TileGrid(
                logo_bitmap,
                pixel_shader=logo_bitmap.pixel_shader,
                x=2,
                y=0
            )
            group.append(logo_tilegrid)
            logo_width = logo_tilegrid.width
        except Exception as e:
            print(f"Error loading image {logo_path}: {e}")

    text_start = logo_width + logo_spacing if logo_path else 0

    if text2.strip() == "":
        label1 = Label(font_large, text=text1, color=color1)
        label1.x = text_start
        label1.y = 16
        group.append(label1)
        text_width = label1.bounding_box[2]
    else:
        label1 = Label(font_small, text=text1, color=color1)
        label1.x = text_start
        label1.y = 10
        group.append(label1)

        label2 = Label(font_small, text=text2, color=color2)
        label2.x = text_start
        label2.y = 22
        group.append(label2)

        text_width = max(label1.bounding_box[2], label2.bounding_box[2])

    total_width = text_start + text_width

    if logo_path and logo_tilegrid:
        try:
            logo_bitmap = displayio.OnDiskBitmap(logo_path)
            second_logo = displayio.TileGrid(
                logo_bitmap,
                pixel_shader=logo_bitmap.pixel_shader,
                x=text_start + text_width,
                y=0
            )
            group.append(second_logo)
            total_width += second_logo.width + 1
        except Exception as e:
            print(f"Error loading second logo image: {e}")

    return group, total_width

def fireworks_animation(duration=2.5, burst_count=5, sparks_per_burst=40):
    print("ðŸŽ† Multi Fireworks Burst")
    animation_group = displayio.Group()
    main_group.append(animation_group)

    start_time = time.monotonic()
    sparks = []

    for i in range(burst_count):
        cx = random.randint(8, WIDTH - 8)
        cy = random.randint(6, HEIGHT // 2)
        base_color = random.choice(firework_colors)
        launch_delay = i * 0.1

        for _ in range(sparks_per_burst):
            angle = random.uniform(0, 2 * math.pi)
            speed = random.uniform(1.5, 3.0)
            dx = speed * math.cos(angle)
            dy = speed * math.sin(angle) - 2.0

            bmp = displayio.Bitmap(1, 1, 1)
            pal = displayio.Palette(1)
            pal[0] = base_color
            pixel = displayio.TileGrid(bmp, pixel_shader=pal, x=cx, y=cy)

            sparks.append({
                "sprite": pixel,
                "x": float(cx),
                "y": float(cy),
                "dx": dx,
                "dy": dy,
                "life": random.randint(15, 25),
                "color": base_color,
                "delay": launch_delay
            })
            animation_group.append(pixel)

    gravity = 0.15

    while time.monotonic() - start_time < duration + 1:
        t = time.monotonic() - start_time
        for spark in sparks:
            if t < spark["delay"]:
                continue
            if spark["life"] <= 0:
                if spark["sprite"] in animation_group:
                    animation_group.remove(spark["sprite"])
                continue
            spark["x"] += spark["dx"]
            spark["y"] += spark["dy"]
            spark["dy"] += gravity
            spark["life"] -= 1

            spark["sprite"].x = int(spark["x"])
            spark["sprite"].y = int(spark["y"])

            fade = spark["life"] / 25
            r = int(((spark["color"] >> 16) & 0xFF) * fade)
            g = int(((spark["color"] >> 8) & 0xFF) * fade)
            b = int((spark["color"] & 0xFF) * fade)
            spark["sprite"].pixel_shader[0] = (r << 16) | (g << 8) | b

        microcontroller.watchdog.feed()
        time.sleep(0.05)

    main_group.remove(animation_group)
    gc.collect()

print("*** Running MatrixPortal S3 Code on TWO TILED PANELS! ***")

# === Setup RTC ===
rtc.RTC().datetime = time.struct_time((2025, 5, 20, 3, 59, 0, 0, -1, -1))
last_reset_day = None

while True:
    try:
        fireworks_animation(duration=2.5, burst_count=3, sparks_per_burst=40)
        for msg1, msg2, logo_path, *optional_color in messages:
            try:
                gc.collect()
                color = optional_color[0] if optional_color else None
                scroll_group, content_width = create_scroll_group(logo_path, msg1, msg2, color)
                scroll_group.x = WIDTH
                main_group.append(scroll_group)

                while scroll_group.x > -content_width - 32:
                    scroll_group.x -= SCROLL_STEP
                    microcontroller.watchdog.feed()
                    time.sleep(SCROLL_DELAY)

                main_group.remove(scroll_group)
                gc.collect()
                time.sleep(0.5)

            except MemoryError:
                print("ðŸ’¥ MemoryError! Trying to recover...")
                main_group = displayio.Group()
                display.root_group = main_group
                gc.collect()
                time.sleep(1)

        current_time = time.localtime()
        if current_time.tm_hour == 4 and current_time.tm_min == 0:
            if last_reset_day != current_time.tm_mday:
                print("ðŸ”„ Auto-resetting board at 4:00 AM Eastern")
                microcontroller.reset()
            last_reset_day = current_time.tm_mday

    except Exception as e:
        print(f"ðŸ’¥ Uncaught error: {e}. Forcing reboot.")
        time.sleep(2)
        microcontroller.reset()
